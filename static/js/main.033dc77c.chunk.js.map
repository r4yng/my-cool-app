{"version":3,"sources":["components/Header.js","components/CountryList.js","components/Country.js","App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["Header","react_default","a","createElement","Navbar","Brand","href","Nav","NavItem","eventKey","NavDropdown","title","id","MenuItem","divider","CountryList","Component","_ref","_ref$countries","countries","onRemove","className","Table","striped","bordered","condensed","hover","map","country","index","key","name","capital","App","_this","this","setState","loading","axios","get","then","response","data","_this$state","state","src","logo","alt","components_Header","process","Date","toString","components_CountryList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","concat","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.033dc77c.chunk.js","sourcesContent":["import React from 'react';\n//import PropTypes from 'prop-types';\nimport { Navbar, Nav, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\n\nconst Header = () => {\n  return (\n    <Navbar>\n        <Navbar.Header>\n        <Navbar.Brand>\n            <a href=\"#home\">React-Bootstrap</a>\n        </Navbar.Brand>\n        </Navbar.Header>\n        <Nav>\n        <NavItem eventKey={1} href=\"#\">\n            Link\n        </NavItem>\n        <NavItem eventKey={2} href=\"#\">\n            Link\n        </NavItem>\n        <NavDropdown eventKey={3} title=\"Dropdown\" id=\"basic-nav-dropdown\">\n            <MenuItem eventKey={3.1}>Action</MenuItem>\n            <MenuItem eventKey={3.2}>Another action</MenuItem>\n            <MenuItem eventKey={3.3}>Something else here</MenuItem>\n            <MenuItem divider />\n            <MenuItem eventKey={3.4}>Separated link</MenuItem>\n        </NavDropdown>\n        </Nav>\n    </Navbar>\n  );\n}\n\n// Header.propTypes = {\n//   tagline: PropTypes.string.isRequired\n// };\n\nexport default Header;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Table } from 'react-bootstrap';\nimport Country from './Country';\n\nconst CountryList = ({ countries=[], onRemove=f=>f }) =>\n    <div className=\"country-list\">\n        {/* {(countries.length === 0) ?\n            <p>No Countries Listed. (Add a Country)</p> :\n            countries.map(country =>\n                <Country key={country.alpha3Code}\n                    {...country}\n                       onRemove={() => onRemove(country.alpha3Code)} />\n            )\n        } */}\n        <Table striped bordered condensed hover>\n            <thead>\n                <tr>\n                <th>Name</th>\n                <th>Capital</th>\n                </tr>\n            </thead>\n            <tbody>\n                {countries.map((country, index) => <tr key={index}><td>{country.name}</td><td>{country.capital}</td></tr>)}\n            </tbody>\n        </Table>\n    </div>\n\nCountryList.propTypes = {\n    countries: PropTypes.array,\n    onRate: PropTypes.func,\n    onRemove: PropTypes.func\n}\n\nexport default CountryList;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n//import '../../stylesheets/Color.scss';\n\nclass Country extends Component {\n\n    componentWillMount() {\n        //this.style = { backgroundColor: \"#CCC\" }\n    }\n\n    shouldComponentUpdate(nextProps) {\n        const { rating } = this.props\n        return rating !== nextProps.rating\n    }\n\n    componentWillUpdate(nextProps) {\n        // const { title, rating } = this.props\n        // this.style = null\n        // this.refs.title.style.backgroundColor = \"red\"\n        // this.refs.title.style.color = \"white\"\n        // alert(`${title}: rating ${rating} -> ${nextProps.rating}`)\n    }\n\n    componentDidUpdate(prevProps) {\n        // const { title, rating } = this.props\n        // const status = (rating > prevProps.rating) ? 'better' : 'worse'\n        // console.log(`${title} is getting ${status}`)\n        // this.refs.title.style.backgroundColor = \"\"\n        // this.refs.title.style.color = \"black\"\n    }\n\n    render() {\n        const { name, onRemove} = this.props\n        return (\n            <section className=\"color\" style={this.style}>\n                <h5 ref=\"name\">{name}</h5>\n                {/* <button onClick={onRemove}>X</button> */}\n                {/* <div className=\"color\"\n                     style={{ backgroundColor: color }}>\n                </div> */}\n            </section>\n        )\n    }\n\n}\n\n// Country.propTypes = {\n//     name: PropTypes.string.isRequired,\n//     alpha3Code: PropTypes.string.isRequired,\n//     onRemove: PropTypes.func,\n// }\n\n// Country.defaultProps = {\n//     rating: 0,\n//     onRemove: f=>f,\n//     onRate: f=>f\n// }\n\nexport default Country;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Header from './components/Header';\nimport CountryList from './components/CountryList';\n\nclass App extends Component {\n\n  componentWillMount() {\n    this.setState({loading: true});\n    // const getFakeMembers = count => axios.get(`https://api.randomuser.me/?nat=US&results=${count}`)\n    //   .then(response => response.data.results)\n    \n    // getFakeMembers(2).then(members => console.log(members));\n    const getCountries = () => axios.get(`https://restcountries.eu/rest/v1/all`)\n    .then(response => response.data);\n    \n    getCountries().then(countries => {\n      this.setState({countries, loading: false})\n      //this.states = {};\n      //this.states = {countries};\n    });\n    //getCountries().then(countries => console.log(countries));\n  }\n\n  render() {\n    const { countries, loading} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <Header></Header>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n        <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n        <small>Code: {process.env.REACT_APP_SECRET_CODE}</small>\n        <p>Copyright {Date().toString()}</p>\n        <CountryList countries={countries} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}